Q1

num1 = int(input ("Enter first num"))
num2 = int(input ("Enter second num"))

num1 = num1 * num2
num2 = num1 / num2
num1 = num1 / num2 
 

print(num1)
print(num2)



Q2

# Method Overlaoding
# As python don't support method overloading this is how we can achieve 
# method overloading functionality

def add(datatype, *args):
    if datatype == 'int':
        answer = 0
        
    if datatype == 'str':
        answer = "String"
    
    for x in args:
        
        answer = answer + x
    print (answer)
        
add('int', 5, 6)

add('str', "Hello", "World")

        
#Method Overriding  

class First:
    
    def function1(self):
        print ('feature 1, class first')
        
    def function2(self):
        print('feature 2, class first')
    
class Second(First):
    def function1(self):
        print("Function 1 changed in class Second")
    def function3 (self):
        print ("feature 3, class second")
        
obj = Second()

obj.function1()




Q3

listA = [1,2,3,4,5]
maxNum = max(listA[0],listA[1])
secondMaxNum = min(listA[0], listA[1])
n = len(listA)
for i in range(2,n):
    if listA[i] > maxNum:
        secondMaxNum = maxNum
        maxNum = listA[1]
    elif listA[i] > secondMaxNum and mx != listA[i]:
        secondMaxNum = listA[i]
        
print ("Second Highest number is :" , str(secondMaxNum))



Q4
from itertools import combinations

def findTriplet(lst1, requiredSum):
    
    def valid (val):
        return sum(val) == requiredSum
    return list(filter(valid, list(combinations(lst1, 3))))
        
lst = [-1,0,1,2,-1,-4]
print(findTriplet(lst, 0))



Q5 
def bubbleSort(array1):
    n = len (array1)
    
    for i in range(n):
        
        for j in range(0, n-i-1):
            
            if array1[j] > array1[j+1]:
                array1[j], array1[j+1] = array1[j+1], array1[j]

arr = [4,5,8,2,3,6,9]
bubbleSort(arr)

print("bubble sorted array is: ")
for i in range (len(arr)):
    print("%d" % arr[i], end="\t")





Q6 
const arr1 = ['a','b','c'];
const arr2 = ['a', 'b','d'];

const union = Array.from(new Set([...arr1, ...arr2]));
console.log(union)




Q7

select FIRST_NAME, LAST_NAME FROM employees 
WHERE MANAGER_ID in (SELECT EMPLOYEE_ID 
FROM EMPLOYEES WHERE DEPARTMENT_ID 
IN (SELECT DEPARTMENT_ID FROM DEPARTMENTS WHERE LOCATION_ID
IN (SELECT LOCATION_ID from LOCATIONS WHERE COUNTRY_ID = "US")))


Q8

SELECT FIRST_NAME, LAST_NAME FROM EMPLOYEES 
WHERE SALARY > ALL (SELECT AVG(SALARY) FROM EMPLOYEES WHERE DEPARTMENT_ID IN (SELECT DEPARTMENT_ID FROM DEPARTMENTS WHERE DEPARTMENT_NAME = "IT DEPARTMENT"))


Q9
def minAbsSumPair (arr, arr_size):
    inv_count = 0
    
    if arr_size < 2:
        print('Invalid Input')
        return
    min_l = 0
    min_r = 1
    min_sum = arr[0] + arr[1]
    for l in range (0, arr_size - 1):
        for r in range (1 + l, arr_size):
            sum = arr[l] + arr[r]
            if abs(min_sum) > abs(sum):
                min_sum = sum
                min_l = l
                min_r = r
    print(arr[min_l], arr[min_r])

arr = [-23, 12, -35, 45, 20, 36]
count = 6
minAbsSumPair(arr, count)